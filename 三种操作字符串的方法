（1）“+”方法拼接字符串
  虽然编译器对字符串的加号做了优化，它会使用
StringBuilder的append方法进行追加，按道理来说，其
执行时间也应该是0毫秒，不过它最终是通过toString方
法转换成String字符串的，例子中"+"拼接的代码与如下
代码相同：
  str=new StringBuilder(str).append
("c").toString();
注意看，它与纯粹使用StringBuilder的append方法是
不同的：一是每次循环都会创建一个StringBuilder对象
，二是每次执行完毕都要调用toString方法将其转换为字
符串――它的执行时间就是耗费在这里了!

(2)concat方法拼接字符串,虽然在内存中的处理都
是原子性操作，速度非常快，不过，注意看最后的return
语句，每次的concat操作都会新创建一个String对象，这
就是concat速度慢下来的真正原因，它创建了5万个
String对象呀！

（3）append方法拼接字符串看到没，整个append方法都在做字符数组处理，加长，
然后数组拷贝，这些都是基本的数据处理，没有新建任何
对象，所以速度也就最快了！注意：例子中是在最后通过
StringBuffer的toString返回了一个字符串，也就是说5
万次循环结束后才生成了一个String对象。
  三者的实现方法不同，性能也就不同，但并不表示我
们一定要使用StringBuilder,这是因为"+"非常符合我们
的编码习惯，适合人类阅读，两个字符串拼接，就用加号
连一下，这很正常，也很友好，在大多数情况下我们都可
以使用加号操作，只有在系统性能临界的时候才可以考虑
使用concat或append方法。而且，很多时候系统80%的性
能是消耗在20%的代码上的，我们的精力应该更多的投入
到算法和结构上。